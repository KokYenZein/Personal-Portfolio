"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./src/data/projects.ts":
/*!******************************!*\
  !*** ./src/data/projects.ts ***!
  \******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"projects\": function() { return /* binding */ projects; }\n/* harmony export */ });\nvar projects = [\n    {\n        id: 1,\n        title: \"Personal Portfolio Website\",\n        category: \"Web Development\",\n        thumbnailUrl: \"/images/works/portfolio-website.png\",\n        description: \"Welcome to my personal portfolio website, a digital space where creativity meets professionalism. \\n    Here, you will find a showcase of my latest projects, a detailed overview of my skills and experiences, and insightful blog posts on topics ranging from cutting-edge technology to innovative design. \\n    Explore my work, learn about my journey, and connect with me to discuss potential collaborations or opportunities. \\n    This website is a testament to my dedication to excellence and continuous growth in the ever-evolving fields of web development and data science.\",\n        publishedAt: \"20 June 2024\",\n        images: [\n            \"/images/works/work-03.png\"\n        ],\n        previewUrl: \"https://yenzeinkok.vercel.app/\",\n        githubLink: \"https://github.com/KokYenZein/Personal-Portfolio\",\n        featureList: [\n            \"100% Fluid Responsive – Fits any device perfectly\",\n            \"Tested on real devices\",\n            \"Flexible Layout\",\n            \"\\n        Use our demo layout or create your own visually different experience using page Vcamp and feature-rich\\n        backend\",\n            \"Unlimited Sidebars\",\n            \"Retina Optimized\",\n            \"Advanced Admin Panel\",\n            \"Demo Import, Content and Sliders\",\n            \"Social Links\",\n            \"Bottom Footer Widgets\",\n            \"Clean &amp; Commented Code\",\n            \"Advanced Typography\",\n            \"Google Fonts – 600+ Font families available\",\n            \"Custom Font Support\",\n            \"Custom Page Templates\",\n            \"Pixel Perfect Design\",\n            \"Quick &amp; Easy Installation &amp; Setup\",\n            \"Custom CSS Ready\",\n            \"HTML5 &amp; CSS3\",\n            \"Easy Customization With Variable Content Sections\",\n            \"Custom Build Theme &amp; Page Options\",\n            \"SEO Ready\", \n        ],\n        attributes: [\n            {\n                name: \"Client\",\n                value: \"Pofology\"\n            },\n            {\n                name: \"Start Date\",\n                value: \"14 June 2024\"\n            },\n            {\n                name: \"End Date\",\n                value: \"Current\"\n            },\n            {\n                name: \"Category\",\n                value: \"Web Development\"\n            },\n            {\n                name: \"Skills\",\n                value: \"Typescript, Next.js & Tailwind CSS\"\n            },\n            {\n                name: \"Current Version\",\n                value: \"1.0.0\"\n            },\n            {\n                name: \"Lisence\",\n                value: \"MIT\"\n            }, \n        ]\n    },\n    {\n        id: 2,\n        title: \"FoodFrame\",\n        category: \"Mobile App\",\n        thumbnailUrl: \"/images/works/social-media-app.png\",\n        description: \"FoodFrame is an innovative app designed to help users manage their kitchen inventory more effectively and plan meals more efficiently. By allowing users to input their current food items, the app suggests recipes based on these inputs, helping to use up ingredients that might otherwise expire. It also tracks nutritional information, helping users maintain a balanced diet and make informed food choices.\",\n        publishedAt: \"06 May 2024\",\n        images: [\n            \"/images/works/foodframe.png\"\n        ],\n        previewUrl: \" \",\n        githubLink: \"https://github.com/KokYenZein/FoodFrame\",\n        featureList: [\n            \"Image recognition to identify food items from pictures\",\n            \"Real-time inventory management\",\n            \"Recipe suggestions based on available ingredients\",\n            \"Nutritional information tracking\",\n            \"Firebase Realtime Database integration\",\n            \"Machine learning models hosted on Google Cloud\",\n            \"User-friendly React Native interface\",\n            \"Seamless backend and frontend integration\",\n            \"Efficient REST API calls\",\n            \"Advanced state management in React\",\n            \"Robust error handling strategy\",\n            \"Optimized for performance and stability\",\n            \"Responsive and intuitive user interface\",\n            \"Dietary planning and management\",\n            \"Community-driven recipe sharing platform\"\n        ],\n        attributes: [\n            {\n                name: \"Client\",\n                value: \"FoodFrame Inc.\"\n            },\n            {\n                name: \"Start Date\",\n                value: \"04 May 2024\"\n            },\n            {\n                name: \"End Date\",\n                value: \"06 May 2024\"\n            },\n            {\n                name: \"Category\",\n                value: \"Mobile Development\"\n            },\n            {\n                name: \"Skills\",\n                value: \"Firebase, Flask, React Native, Google Cloud\"\n            },\n            {\n                name: \"Current Version\",\n                value: \"1.0.0\"\n            },\n            {\n                name: \"License\",\n                value: \"MIT\"\n            }, \n        ]\n    },\n    {\n        id: 3,\n        title: \"LinguaStream\",\n        category: \"Web Development\",\n        thumbnailUrl: \"/images/works/marketplace-website.png\",\n        description: \"LinguaStream is a user-friendly website that provides audio translation of YouTube videos into the user's desired languages in real time, removing the need for subtitles and making content more accessible. Furthermore, LinguaStream contains a built-in chatbot to answer questions regarding the video content; enhancing user understanding and engagement by providing additional information and clarifications.\",\n        publishedAt: \"20 May 2024\",\n        images: [\n            \"/images/works/linguastream.png\"\n        ],\n        previewUrl: \" \",\n        githubLink: \"https://github.com/KokYenZein/LinguaStream\",\n        featureList: [\n            \"Real-time audio translation of YouTube videos\",\n            \"Built-in chatbot for video content queries\",\n            \"User-friendly React interface\",\n            \"Responsive design with TailwindCSS and ChakraUI\",\n            \"Authentication and user management with SQLite\",\n            \"Integration with YouTube API v3 for video details\",\n            \"Google Cloud services for text-to-speech and translation\",\n            \"Flask backend for handling requests and hosting\",\n            \"Low latency audio streaming\",\n            \"Voice cloning with Bark for unique voice outputs\",\n            \"Async/Await handling for efficient data fetching\",\n            \"Error handling and robust backend/frontend communication\",\n            \"End-to-end process from video fetching to audio output\",\n            \"Support for multiple languages (English, Chinese, French)\",\n            \"Seamless routing and state management in React\",\n            \"Future plans for more languages, accents, and dialects\",\n            \"History page for accessing previous videos\"\n        ],\n        attributes: [\n            {\n                name: \"Client\",\n                value: \"LinguaStream Inc.\"\n            },\n            {\n                name: \"Start Date\",\n                value: \"18 May 2024\"\n            },\n            {\n                name: \"End Date\",\n                value: \"20 May 2024\"\n            },\n            {\n                name: \"Category\",\n                value: \"Web Development\"\n            },\n            {\n                name: \"Skills\",\n                value: \"React, TailwindCSS, ChakraUI, Axios, Flask, SQLite, YouTube API, Google Cloud, Firebase\"\n            },\n            {\n                name: \"Current Version\",\n                value: \"1.0.0\"\n            },\n            {\n                name: \"License\",\n                value: \"MIT\"\n            }, \n        ]\n    }, \n];\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/data/projects.ts\n"));

/***/ })

});